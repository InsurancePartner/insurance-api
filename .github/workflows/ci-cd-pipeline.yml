name: CI/CD Pipeline for Insurance API

on:
  push:
    branches:
      - development

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Build TypeScript
      run: npm run build

    - name: Build Docker image and push to ECR
      run: |
        aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin $AWS_ECR_URL
        docker build -t insurance-api-ecr:latest .
        docker tag insurance-api-ecr:latest $AWS_ECR_URL/insurance-api-ecr:latest
        docker push $AWS_ECR_URL/insurance-api-ecr:latest
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }} 

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1

    - name: Deploy to ECS
      run: aws ecs update-service --cluster insurance-cluster --service insurance-api-service --force-new-deployment

  populate_database:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
    - name: Install dependencies
      run: npm install
    - name: Populate database with initial data
      run: node scripts/populate-initial-data.js
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASS: ${{ secrets.DB_PASS }}
